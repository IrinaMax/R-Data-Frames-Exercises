# EXAMPLE 1: Create a function that takes in a name as a string argument, and prints out "Hello name"
hello_name <- function(name){
  print(paste('Hello', name))
}
hello_name("Sam")
#EXAMPLE 2: Create a function that takes in a name as a string argument and returns a string 
# of the form - "Hello name"
hello_name2 <- function(name = "Sam"){
  print(paste('Hello', name))
}
print(hello_name2)

##Ex 1: Create a function that will return the product of two integers.
product <- function(a,b) {
  return(a +b)
}
product(1, 5)
## Ex 2: Create a function that accepts two arguments, an integer and a vector of integers.
##It returns TRUE if the integer is present in the vector, otherwise it returns FALSE. 
##Make sure you pay careful attention to your placement of the return(FALSE) line in your function!

numb_check <- function(num, c) {
  for (i in c){
    if (i == num){
      return(TRUE)
    }
  } return(FALSE)
}
numb_check(5, c(1,2,3))

##Ex 3: Create a function that accepts two arguments, an integer and a vector of integers. It returns 
##the count of the number of occurences of the integer in the input vector.
numb_check2 <- function(num, c) {
  out <- 0
  for(i in c){
    if (i == num) {
      out <- out +1
    }
  } 
  return(out)
}
numb_check2(2,c(1,1,2,2,3,3))

#Ex 4: We want to ship bars of aluminum. We will create a function that accepts an integer representing 
#the requested kilograms of aluminum for the package to be shipped. To fullfill these order, we have 
#small bars (1 kilogram each) and big bars (5 kilograms each). Return the least number of bars needed.
##For example, a load of 6 kg requires a minimum of two bars (1 5kg bars and 1 1kg bars). A load of 
#17 kg requires a minimum of 5 bars (3 5kg bars and 2 1kg bars).

bar_count_n1 <- function(pack) {
  one <-pack%%5
  five <- (pack-one)/5
  return( one +five )
}
  
bar_count_n(17)

#Ex 5: Create a function that accepts 3 integer values and returns their sum. However, if an integer 
#value is evenly divisible by 3, then it does not count towards the sum. Return zero if all numbers are 
#evenly divisible by 3. Hint: You may want to use the append() function.

summer <- function(a,b,c){
  out <- c(0)
  if (a%%3 !=0) {
    out <- append(a,out)
  }
  if (b%%3 !=0) {
    out <- append(b,out)
  }
  if (c%%3 !=0) {
    out <- append(c,out)
  }
  return(sum(out))
}
 summer(4,6,8) 
  
